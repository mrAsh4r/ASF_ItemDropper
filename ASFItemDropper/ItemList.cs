
// Generated by https://quicktype.io
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace QuickType;


public partial class ItemList
{
    [JsonPropertyName("accountid")]
    public string? Accountid { get; set; }

    [JsonPropertyName("itemid")]
    public string? Itemid { get; set; }

    [JsonPropertyName("quantity")]
    public long Quantity { get; set; }

    [JsonPropertyName("originalitemid")]
    public string? Originalitemid { get; set; }

    [JsonPropertyName("itemdefid")]
    [JsonConverter(typeof(ParseStringConverter))]
    public long Itemdefid { get; set; }

    [JsonPropertyName("appid")]
    public long Appid { get; set; }

    [JsonPropertyName("acquired")]
    public string? Acquired { get; set; }

    [JsonPropertyName("state")]
    public string? State { get; set; }

    [JsonPropertyName("origin")]
    public string? Origin { get; set; }

    [JsonPropertyName("state_changed_timestamp")]
    public string? StateChangedTimestamp { get; set; }
}

public partial class ItemList
{
    public static ItemList[] FromJson(string json)
    {
        return JsonSerializer.Deserialize<ItemList[]>(json, Converter.Settings) ?? Array.Empty<ItemList>();
    }
}

public static class Serialize
{
    public static string ToJson(this ItemList[] self) => JsonSerializer.Serialize(self, QuickType.Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new()
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters = {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}

internal class ParseStringConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object? ReadJson(JsonReader reader, Type t, object? existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (long.TryParse(value, out var l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object? untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (long)untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
    }

    public static readonly ParseStringConverter Singleton = new();
}
